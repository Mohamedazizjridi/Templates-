vector<ll> get_divisors(ll n) {
  vector<ll> divs;
  for (int i = 1; 1LL * i * i <= n; i++) {
    if (n % i == 0) {
      divs.push_back(i);
      if (i != n / i) {
        divs.push_back(n / i);
      }
    }
  }
  sort(divs.begin(), divs.end());
  return divs;
}
// This code efficiently computes the prime factorization of numbers using a smallest prime factor (SPF) sieve O(n log log n) 
vector<int> spf; // Smallest prime factor for every number
void precompute_spf(int n) {
    spf.resize(n + 1);
    for (int i = 1; i <= n; ++i) spf[i] = i;  // Initialize each number with itself
    
    for (int p = 2; p * p <= n; ++p) {  // Iterate over numbers up to sqrt(n)
        if (spf[p] == p) {  // If p is prime (still marked as itself)
            for (int i = p * p; i <= n; i += p) // Mark multiples of p
                if (spf[i] == i) spf[i] = p; // Assign the smallest prime factor
        }
    }
}
// Fast Prime Factorization in O(log n)
vector<int> fast_prime_factors(int x) {
    vector<int> factors;
    while (x != 1) {
        factors.push_back(spf[x]);  // Extract the smallest prime factor
        x /= spf[x];  // Divide by the extracted prime factor
    }
    return factors;
}

// counts the number of positive integers in the interval [1,n] which are coprime to n : 
int phi(int n) {
	int ans = n;
	for (int p = 2; p * p <= n; p++) {
		if (n % p == 0) {
			while (n % p == 0) { n /= p; }
			ans -= ans / p;
		}
	}
	if (n > 1) { ans -= ans / n; }
	return ans;
}
// precompute  O(nlognlogn)
void precompute() {
	for (int i = 1; i < MAX_N; i++) { phi[i] = i; }
	for (int i = 2; i < MAX_N; i++) {
		// If i is prime
		if (phi[i] == i) {
			for (int j = i; j < MAX_N; j += i) { phi[j] -= phi[j] / i; }
		}
	}
}


